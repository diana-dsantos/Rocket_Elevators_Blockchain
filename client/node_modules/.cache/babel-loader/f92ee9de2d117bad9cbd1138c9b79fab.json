{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diana\\\\drizzle-react-tutorial\\\\client\\\\src\\\\controllers\\\\ReadString.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ReadString extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataKeyBattery: null,\n      dataKeyColumns: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.MyStringStore;\n    console.log(drizzle);\n    console.log(drizzleState); // let drizzle know we want to watch the `myString` method\n\n    const dataKeyBattery = contract.methods[\"batteries\"].cacheCall();\n    const dataKeyColumns = contract.methods[\"columns\"].cacheCall(); // save the `dataKey` to local component state for later reference\n\n    this.setState({\n      dataKeyBattery,\n      dataKeyColumns\n    });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const {\n      MyStringStore\n    } = this.props.drizzleState.contracts; // using the saved `dataKey`, get the variable we're interested in\n\n    const batteries = MyStringStore.batteries[this.state.dataKeyBattery];\n    const columns = MyStringStore.columns[this.state.dataKeyColumns]; // if it exists, then we display its value\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: [\"Test  : \", batteries && batteries.value]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: [\"Test  : \", columns && columns.value]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default ReadString;","map":{"version":3,"sources":["C:/Users/Diana/drizzle-react-tutorial/client/src/controllers/ReadString.js"],"names":["React","ReadString","Component","state","dataKeyBattery","dataKeyColumns","componentDidMount","drizzle","drizzleState","props","contract","contracts","MyStringStore","console","log","methods","cacheCall","setState","render","batteries","columns","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,UAAN,SAAyBD,KAAK,CAACE,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACvCC,KADuC,GAC/B;AAAEC,MAAAA,cAAc,EAAE,IAAlB;AAAuBC,MAAAA,cAAc,EAAE;AAAvC,KAD+B;AAAA;;AAGvCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAA4B,KAAKC,KAAvC;AACA,UAAMC,QAAQ,GAAGH,OAAO,CAACI,SAAR,CAAkBC,aAAnC;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ,EALkB,CAOlB;;AACA,UAAMJ,cAAc,GAAGM,QAAQ,CAACK,OAAT,CAAiB,WAAjB,EAA8BC,SAA9B,EAAvB;AACA,UAAMX,cAAc,GAAGK,QAAQ,CAACK,OAAT,CAAiB,SAAjB,EAA4BC,SAA5B,EAAvB,CATkB,CAWlB;;AACA,SAAKC,QAAL,CAAc;AAAEb,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB,KAAd;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEN,MAAAA;AAAF,QAAoB,KAAKH,KAAL,CAAWD,YAAX,CAAwBG,SAAlD,CAFO,CAIP;;AACA,UAAMQ,SAAS,GAAGP,aAAa,CAACO,SAAd,CAAwB,KAAKhB,KAAL,CAAWC,cAAnC,CAAlB;AACA,UAAMgB,OAAO,GAAGR,aAAa,CAACQ,OAAd,CAAsB,KAAKjB,KAAL,CAAWE,cAAjC,CAAhB,CANO,CAQP;;AACA,wBACD;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BAAgCc,SAAS,IAAIA,SAAS,CAACE,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEK;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BAAgCD,OAAO,IAAIA,OAAO,CAACC,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFL;AAAA;AAAA;AAAA;AAAA;AAAA,YADC;AAMD;;AAjCsC;;AAoCzC,eAAepB,UAAf","sourcesContent":["import React from \"react\";\r\n\r\nclass ReadString extends React.Component {\r\n  state = { dataKeyBattery: null,dataKeyColumns: null };\r\n\r\n  componentDidMount() {\r\n    const { drizzle, drizzleState } = this.props;\r\n    const contract = drizzle.contracts.MyStringStore;\r\n\r\n    console.log(drizzle);\r\n    console.log(drizzleState);\r\n\r\n    // let drizzle know we want to watch the `myString` method\r\n    const dataKeyBattery = contract.methods[\"batteries\"].cacheCall();\r\n    const dataKeyColumns = contract.methods[\"columns\"].cacheCall();\r\n\r\n    // save the `dataKey` to local component state for later reference\r\n    this.setState({ dataKeyBattery, dataKeyColumns});\r\n  }\r\n\r\n  render() {\r\n    // get the contract state from drizzleState\r\n    const { MyStringStore } = this.props.drizzleState.contracts;\r\n \r\n    // using the saved `dataKey`, get the variable we're interested in\r\n    const batteries = MyStringStore.batteries[this.state.dataKeyBattery];\r\n    const columns = MyStringStore.columns[this.state.dataKeyColumns];\r\n    \r\n    // if it exists, then we display its value\r\n    return (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"col-6\">Test  : {batteries && batteries.value}</div>\r\n        <div className=\"col-6\">Test  : {columns && columns.value}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n  }\r\n}\r\n\r\nexport default ReadString;"]},"metadata":{},"sourceType":"module"}