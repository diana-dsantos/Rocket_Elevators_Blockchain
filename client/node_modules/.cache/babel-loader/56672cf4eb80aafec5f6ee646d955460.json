{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diana\\\\drizzle-react-tutorial\\\\client\\\\src\\\\contracts\\\\ReadString.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ReadString extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataKey: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.MyStringStore; // let drizzle know we want to watch the `myString` method\n\n    const dataKey = contract.methods[\"myString\"].cacheCall(); // save the `dataKey` to local component state for later reference\n\n    this.setState({\n      dataKey\n    });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const {\n      MyStringStore\n    } = this.props.drizzleState.contracts; // using the saved `dataKey`, get the variable we're interested in\n\n    const myString = MyStringStore.myString[this.state.dataKey]; // if it exists, then we display its value\n\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"My stored string: \", myString && myString.value]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default ReadString;","map":{"version":3,"sources":["C:/Users/Diana/drizzle-react-tutorial/client/src/contracts/ReadString.js"],"names":["React","ReadString","Component","state","dataKey","componentDidMount","drizzle","props","contract","contracts","MyStringStore","methods","cacheCall","setState","render","drizzleState","myString","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,UAAN,SAAyBD,KAAK,CAACE,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACvCC,KADuC,GAC/B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAD+B;AAAA;;AAGvCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,aAAnC,CAFkB,CAIlB;;AACA,UAAMN,OAAO,GAAGI,QAAQ,CAACG,OAAT,CAAiB,UAAjB,EAA6BC,SAA7B,EAAhB,CALkB,CAOlB;;AACA,SAAKC,QAAL,CAAc;AAAET,MAAAA;AAAF,KAAd;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEJ,MAAAA;AAAF,QAAoB,KAAKH,KAAL,CAAWQ,YAAX,CAAwBN,SAAlD,CAFO,CAIP;;AACA,UAAMO,QAAQ,GAAGN,aAAa,CAACM,QAAd,CAAuB,KAAKb,KAAL,CAAWC,OAAlC,CAAjB,CALO,CAOP;;AACA,wBAAO;AAAA,uCAAsBY,QAAQ,IAAIA,QAAQ,CAACC,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAvBsC;;AA0BzC,eAAehB,UAAf","sourcesContent":["import React from \"react\";\r\n\r\nclass ReadString extends React.Component {\r\n  state = { dataKey: null };\r\n\r\n  componentDidMount() {\r\n    const { drizzle } = this.props;\r\n    const contract = drizzle.contracts.MyStringStore;\r\n\r\n    // let drizzle know we want to watch the `myString` method\r\n    const dataKey = contract.methods[\"myString\"].cacheCall();\r\n\r\n    // save the `dataKey` to local component state for later reference\r\n    this.setState({ dataKey });\r\n  }\r\n\r\n  render() {\r\n    // get the contract state from drizzleState\r\n    const { MyStringStore } = this.props.drizzleState.contracts;\r\n\r\n    // using the saved `dataKey`, get the variable we're interested in\r\n    const myString = MyStringStore.myString[this.state.dataKey];\r\n\r\n    // if it exists, then we display its value\r\n    return <p>My stored string: {myString && myString.value}</p>;\r\n  }\r\n}\r\n\r\nexport default ReadString;"]},"metadata":{},"sourceType":"module"}