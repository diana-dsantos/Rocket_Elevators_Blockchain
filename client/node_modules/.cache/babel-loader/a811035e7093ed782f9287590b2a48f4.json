{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diana\\\\drizzle-react-tutorial\\\\client\\\\src\\\\controllers\\\\SetString.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SetString extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      stackId: null\n    };\n\n    this.handleKeyDown = e => {\n      // if the enter key is pressed, set the value with the string\n      if (e.keyCode === 13) {\n        this.setValue(e.target.value);\n      }\n    };\n\n    this.setValue = value => {\n      const {\n        drizzle,\n        drizzleState\n      } = this.props;\n      const contract = drizzle.contracts.MyStringStore; // let drizzle know we want to call the `set` method with `value`\n\n      const stackId = contract.methods[\"set\"].cacheSend(value, {\n        from: drizzleState.accounts[0]\n      }); // save the `stackId` for later reference\n\n      this.setState({\n        stackId\n      });\n    };\n\n    this.getTxStatus = () => {\n      // get the transaction states from the drizzle state\n      const {\n        transactions,\n        transactionStack\n      } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n      const txHash = transactionStack[this.state.stackId]; // if transaction hash does not exist, don't display anything\n\n      if (!txHash) return null; // otherwise, return the transaction status\n\n      return `Transaction status: ${transactions[txHash] && transactions[txHash].status}`;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onKeyDown: this.handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SetString;","map":{"version":3,"sources":["C:/Users/Diana/drizzle-react-tutorial/client/src/controllers/SetString.js"],"names":["React","SetString","Component","state","stackId","handleKeyDown","e","keyCode","setValue","target","value","drizzle","drizzleState","props","contract","contracts","MyStringStore","methods","cacheSend","from","accounts","setState","getTxStatus","transactions","transactionStack","txHash","status","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACtCC,KADsC,GAC9B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAD8B;;AAAA,SAGtCC,aAHsC,GAGtBC,CAAC,IAAI;AACnB;AACA,UAAIA,CAAC,CAACC,OAAF,KAAc,EAAlB,EAAsB;AACpB,aAAKC,QAAL,CAAcF,CAAC,CAACG,MAAF,CAASC,KAAvB;AACD;AACF,KARqC;;AAAA,SAUtCF,QAVsC,GAU3BE,KAAK,IAAI;AAClB,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAA4B,KAAKC,KAAvC;AACA,YAAMC,QAAQ,GAAGH,OAAO,CAACI,SAAR,CAAkBC,aAAnC,CAFkB,CAIlB;;AACA,YAAMZ,OAAO,GAAGU,QAAQ,CAACG,OAAT,CAAiB,KAAjB,EAAwBC,SAAxB,CAAkCR,KAAlC,EAAyC;AACvDS,QAAAA,IAAI,EAAEP,YAAY,CAACQ,QAAb,CAAsB,CAAtB;AADiD,OAAzC,CAAhB,CALkB,CASlB;;AACA,WAAKC,QAAL,CAAc;AAAEjB,QAAAA;AAAF,OAAd;AACD,KArBqC;;AAAA,SAuBtCkB,WAvBsC,GAuBxB,MAAM;AAClB;AACA,YAAM;AAAEC,QAAAA,YAAF;AAAgBC,QAAAA;AAAhB,UAAqC,KAAKX,KAAL,CAAWD,YAAtD,CAFkB,CAIlB;;AACA,YAAMa,MAAM,GAAGD,gBAAgB,CAAC,KAAKrB,KAAL,CAAWC,OAAZ,CAA/B,CALkB,CAOlB;;AACA,UAAI,CAACqB,MAAL,EAAa,OAAO,IAAP,CARK,CAUlB;;AACA,aAAQ,uBAAsBF,YAAY,CAACE,MAAD,CAAZ,IAAwBF,YAAY,CAACE,MAAD,CAAZ,CAAqBC,MAAO,EAAlF;AACD,KAnCqC;AAAA;;AAqCtCC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,SAAS,EAAE,KAAKtB;AAAnC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AA3CqC;;AA8CxC,eAAeJ,SAAf","sourcesContent":["import React from \"react\";\r\n\r\nclass SetString extends React.Component {\r\n  state = { stackId: null };\r\n\r\n  handleKeyDown = e => {\r\n    // if the enter key is pressed, set the value with the string\r\n    if (e.keyCode === 13) {\r\n      this.setValue(e.target.value);\r\n    }\r\n  };\r\n\r\n  setValue = value => {\r\n    const { drizzle, drizzleState } = this.props;\r\n    const contract = drizzle.contracts.MyStringStore;\r\n\r\n    // let drizzle know we want to call the `set` method with `value`\r\n    const stackId = contract.methods[\"set\"].cacheSend(value, {\r\n      from: drizzleState.accounts[0]\r\n    });\r\n\r\n    // save the `stackId` for later reference\r\n    this.setState({ stackId });\r\n  };\r\n\r\n  getTxStatus = () => {\r\n    // get the transaction states from the drizzle state\r\n    const { transactions, transactionStack } = this.props.drizzleState;\r\n\r\n    // get the transaction hash using our saved `stackId`\r\n    const txHash = transactionStack[this.state.stackId];\r\n\r\n    // if transaction hash does not exist, don't display anything\r\n    if (!txHash) return null;\r\n\r\n    // otherwise, return the transaction status\r\n    return `Transaction status: ${transactions[txHash] && transactions[txHash].status}`;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type=\"text\" onKeyDown={this.handleKeyDown} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SetString;"]},"metadata":{},"sourceType":"module"}